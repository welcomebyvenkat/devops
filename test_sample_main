import pytest
from unittest.mock import patch
import sys
from f1 import f_main_run, SetParameters


@pytest.fixture
def mock_config():
    return SetParameters({}, "hai", "test", "haii")


def test_f_main_run_success(mock_config):
    test_args = ["script_name", "-r", "1", "-c", "test_config", "-s", "10"]

    with patch.object(sys, "argv", test_args), \
            patch("f1.directories_setup_and_env_sourcing", return_value=mock_config), \
            patch("f1.f_invoke_psql_cmd", return_value=("INFO", "good")) as mock_psql, \
            patch("f1.f_archive_all_elg_request") as mock_archive, \
            patch("f1.notify_success_email") as mock_notify:
        f_main_run("batch_guid")

        mock_psql.assert_called()
        mock_archive.assert_called()
        mock_notify.assert_called()


def test_f_main_run_failure(mock_config):
    test_args = ["script_name", "-r", "1", "-c", "test_config", "-s", "10"]

    with patch.object(sys, "argv", test_args), \
            patch("f1.directories_setup_and_env_sourcing", return_value=mock_config), \
            patch("f1.f_invoke_psql_cmd", return_value=("ERROR", "failure")) as mock_psql, \
            patch("f1.f_exit_on_archive_error") as mock_exit:
        f_main_run("batch_guid")

        mock_psql.assert_called()
        mock_exit.assert_called()

